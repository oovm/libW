package unstable: debugger;

world debugger {
  import print;
}

interface print {
  record point {
    x: f32,
    y: f32,
  }

  // values of this type will be one of the specified cases
  variant human {
    baby,
    child(u32), // optional type payload
    adult,
  }

  // similar to `variant`, but no type payloads
  enum errno {
    too-big,
    too-small,
    too-fast,
    too-slow,
  }

  // a bitflags type
  flags permissions {
    read,
    write,
    exec,
  }

  print-i8: func(value: s8);
  print-i16: func(value: s16);
  print-i32: func(value: s32);
  print-i64: func(value: s64);
  print-u8: func(value: u8);
  print-u16: func(value: u16);
  print-u32: func(value: u32);
  print-u64: func(value: u64);
  print-f32: func(value: float32);
  print-f64: func(value: float64);
  print-char: func(value: char);
  print-str: func(value: string);
  print-tuple: func(value: tuple<u8,s8>);
  print-point: func(value: point);
  print-human: func(value: human);
  print-errno: func(value: errno);
  print-permissions: func(value: permissions);
}
